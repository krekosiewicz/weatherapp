user nginx;
worker_processes 1;
error_log /var/log/nginx/error.log warn;
pid /var/run/nginx.pid;

events {
    # The maximum number of simultaneous connections that can be opened by a worker process.
    worker_connections 1024;
}

http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for"';

    access_log /var/log/nginx/access.log main;

    sendfile on;
    keepalive_timeout 65;

    server {
        listen 80;
        #listen 443 ssl;
        server_name ${DOMAIN_NAME} www.${DOMAIN_NAME};

        location /.well-known/acme-challenge/ {
            root /var/www/certbot;
            try_files $uri =404;
        }

        location / {
            return 301 https://${DOMAIN_NAME}$request_uri;
        }
    }

    server {
        listen 443 ssl;
        server_name ${DOMAIN_NAME};

        ssl_certificate /etc/letsencrypt/live/${DOMAIN_NAME}/fullchain.pem;
        ssl_certificate_key /etc/letsencrypt/live/${DOMAIN_NAME}/privkey.pem;

        # HSTS (HTTP Strict Transport Security):
        # Importance:  HSTS is a security feature that instructs browsers to only interact with your server using secure HTTPS connections
        #              and never over the insecure HTTP protocol. This prevents SSL stripping attacks where an attacker could downgrade the connection from HTTPS to HTTP to intercept data.
        # Improvement: By including preload in the HSTS header and submitting your domain to the HSTS preload list,
        #              browsers will know to only use HTTPS for your site from the outset, even on the very first visit.
        add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload" always;


        # OCSP Stapling:
        # Importance:   Online Certificate Status Protocol (OCSP) stapling is a method for quickly checking the revocation status of an X.509 digital certificate.
        #               Instead of relying on the client to check the revocation status, the server periodically checks with the CA's OCSP server and then provides the signed response to the client.
        #               This improves privacy because the CA is not informed about who is visiting the site.
        # Improvement:  OCSP stapling enhances performance since it reduces the number of connections made during the SSL/TLS handshake and decreases the overall handshake time,
        #               providing a faster, more scalable solution.
        ssl_stapling on;
        ssl_stapling_verify on;
        resolver 8.8.8.8 valid=300s;
        resolver_timeout 5s;

        # SSL Session Caching:
        # Importance:  SSL/TLS handshakes can be resource-intensive, slowing down the initial connection setup.
        #              SSL session caching saves data from a session so that when the client reconnects,
        #              it can use this cache to resume the session without needing to perform a full handshake.
        # Improvement: This mechanism significantly speeds up subsequent connections after the first visit,
        #              improving the user experience with quicker load times.
        ssl_session_cache shared:SSL:10m;
        ssl_session_timeout 1h;


        # Cipher Suites:
        # Importance: Cipher suites determine the encryption algorithms used during the SSL/TLS handshake.
        #              They are fundamental to the security and performance of SSL/TLS connections.
        # Improvement: Selecting modern, strong cipher suites, and preferring server ciphers ensures that your server uses the best available encryption algorithms,
        #              balancing both security (by avoiding weak ciphers) and performance. It gives your server the control to choose ciphers based on the latest security standards,
        #              which is crucial as cipher suite recommendations evolve over time.

        # the most secure, but exclude older safari version
        ssl_ciphers 'ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384';
        # older version of safari are not excluded, but tls 1.2 is weak
        # ssl_ciphers 'ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES256-SHA:ECDHE-RSA-AES256-SHA:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES128-SHA';

        #ssl_ciphers 'ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES256-SHA:ECDHE-RSA-AES256-SHA:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES128-SHA:AES256-SHA:AES128-SHA';

        ssl_prefer_server_ciphers on;

        location / {
            proxy_pass http://web:5000/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
    }
}


# DNS CAA: A DNS CAA record allows domain owners to specify which certificate authorities (CAs) are permitted to issue certificates for their domain. This helps prevent unauthorized issuance of certificates by CAs that are not listed in the CAA record.
# Importance: Having a CAA record is a way to add another layer of security, making it more difficult for attackers to issue unauthorized certificates for your domain.
# Recommendation: It's a good idea to add a CAA record to your DNS settings. To do this, you need to determine which CAs you want to authorize (e.g., Let's Encrypt) and then add a CAA record through your domain registrar or DNS provider's control panel.
